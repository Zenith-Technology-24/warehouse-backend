generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActivityLog {
  id            String @id @unique @default(uuid())
  date          String @unique
  activity      String @default("")
  performedById String
  performedBy   User   @relation(name: "performedByRelation", fields: [performedById], references: [id])

  @@map("activity_logs")
}

model Inventory {
  id       String        @id @unique @default(uuid())
  name     String        @unique
  sizeType SizeType      @default(none)
  status   ProductStatus @default(active)
  unit     String?
  quantity String?       @default("1")
  item     Item?         @relation(fields: [itemId], references: [id])
  receipts Receipt[]

  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  endUser    EndUser?  @relation(fields: [endUserId], references: [id])
  endUserId  String?
  itemId     String?
  issuance   Issuance? @relation(fields: [issuanceId], references: [id])
  issuanceId String?

  // Add issuance details relation for more direct access
  issuanceDetails      IssuanceDetail[]
  InventoryTransaction InventoryTransaction[]

  @@map("inventories")
}

model Item {
  id                   String                 @id @unique @default(uuid())
  item_name            String
  location             String
  size                 String?
  unit                 String?
  receiptRef           String?
  quantity             String?
  expiryDate           DateTime?              @map("expiry_date")
  price                String?
  amount               String?
  refId                String?
  inventoryId          String?
  inventory            Inventory[]
  receipt              Receipt?               @relation(fields: [receiptId], references: [id])
  receiptId            String?
  IssuanceDetail       IssuanceDetail?        @relation(fields: [issuanceDetailId], references: [id])
  issuanceDetailId     String?
  InventoryTransaction InventoryTransaction[]

  @@map("items")
}

model Receipt {
  id                String        @id @unique @default(uuid())
  receiptDate       DateTime      @default(now()) @map("receipt_date")
  source            String?
  quantity          String?       @default("1")
  status            ProductStatus @default(pending)
  issuanceDirective String?       @unique @map("issuance_directive")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  inventory         Inventory[]
  user              User?         @relation(fields: [userId], references: [id])
  userId            String?
  item              Item[]

  @@map("receipts")
}

model Issuance {
  id                String        @id @unique @default(uuid())
  issuanceDate      DateTime      @default(now()) @map("issuance_date")
  issuanceDirective String?       @map("issuance_directive")
  validityDate      DateTime      @map("validity_date")
  documentNo        String?       @map("document_no")
  quantity          String?       @default("1")
  endUsers          EndUser[] // This creates the many-to-many relationship
  status            ProductStatus @default(active)
  issuanceStatus    ProductStatus @default(pending)
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  user              User?         @relation(fields: [userId], references: [id])
  userId            String?

  // Add direct inventory relation
  inventory       Inventory[]
  issuanceDetails IssuanceDetail[]

  @@map("issuances")
}

model ReturnedItems {
  id                  String             @id @unique @default(uuid())
  itemName            String?       
  date                String?
  time                String?
  personnel           String
  notes               String
  status              ReturnedItemStatus @default(active)
  size                String?
  receiptRef          String
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt

  @@map("returnedItems")
}

model IssuanceDetail {
  id        String        @id @unique @default(uuid())
  quantity  String        @default("1")
  status    ProductStatus @default(pending)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  // Improve relations for easier querying
  inventory   Inventory? @relation(fields: [inventoryId], references: [id])
  inventoryId String?

  issuance   Issuance @relation(fields: [issuanceId], references: [id])
  issuanceId String

  endUser   EndUser? @relation(fields: [endUserId], references: [id])
  endUserId String?

  items Item[]

  @@map("issuance_details")
}

model EndUser {
  id          String           @id @unique @default(uuid())
  name        String
  inventories IssuanceDetail[]
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  // Remove the single Issuance relation
  // Issuance    Issuance?        @relation(fields: [issuanceId], references: [id])
  // issuanceId  String?
  // Instead add a many-to-many relationship
  issuances   Issuance[]
  inventory   Inventory[]

  @@map("end_users")
}

model Role {
  id          String   @id @unique @default(uuid())
  name        String   @unique
  description String?
  permissions String[]
  users       User[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("roles")
}

model User {
  id                    String        @id @unique @default(uuid())
  email                 String        @unique
  firstname             String
  username              String?       @unique
  lastname              String
  password              String
  status                UserStatus    @default(active)
  roles                 Role[]
  Token                 Token?
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @default(now()) @updatedAt @map("updated_at")
  Issuance              Issuance[]
  Receipt               Receipt[]
  performedActivityLogs ActivityLog[] @relation("performedByRelation")

  @@map("user")
}

model InventoryTransaction {
  id          String          @id @unique @default(uuid())
  inventoryId String
  inventory   Inventory       @relation(fields: [inventoryId], references: [id])
  quantity    String
  type        TransactionType // RECEIPT or ISSUANCE
  receiptId   String?
  issuanceId  String?
  size        String?
  date        DateTime        @default(now())
  itemId      String?
  price       String?
  amount      String?
  receiptRef  String?
  item        Item?           @relation(fields: [itemId], references: [id])

  @@map("inventory_transactions")
}

enum TransactionType {
  RECEIPT
  ISSUANCE
}

model Token {
  id           String    @id @unique @default(uuid())
  token        String?
  refreshToken String?
  resetToken   String?
  expires_at   DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String    @unique

  @@map("tokens")
}

enum UserStatus {
  active
  inactive
}

enum ReturnedItemStatus {
  active
  archived
}

enum ProductStatus {
  active
  archived
  withdrawn
  pending
}

enum SizeType {
  none
  apparrel
  numerical
  standard
  length
  fit
  expanded
  roman
}
