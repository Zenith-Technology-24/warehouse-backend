generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Expense {
  id          String   @id @unique @default(uuid())
  expenseType String   @map("expense_type")
  amount      Decimal  @db.Decimal(10, 2)
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  description String
  status      Status   @default(active)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("expense")
}

// ...existing code...

model Inventory {
  id            String               @id @unique @default(uuid())
  itemName      String               @map("item_name")
  location      String
  supplier      String
  quantity      Int
  price         Decimal              @db.Decimal(10, 2)
  amount        Decimal              @db.Decimal(10, 2)
  size          String?
  unit          Units                @default(ea)
  status        InventoryStatus      @default(active)
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")
  issuanceItems IssuanceEndUserItem[]

  @@map("inventory")
}

model EndUser {
  id                String               @id @unique @default(uuid())
  name              String               @map("name")
  issuanceEndUsers  IssuanceEndUser[]

  @@map("end_user")
}

model Issuance {
  id           String             @id @unique @default(uuid())
  userId       String             @map("user_id")
  directiveNo  String             @map("directive_no")
  issuanceDate DateTime           @default(now()) @map("issuance_date")
  expiryDate   DateTime           @map("expiry_date")
  documentNum  String             @map("document_num")
  status       IssuanceStatus     @default(pending)
  user         User               @relation(fields: [userId], references: [id])
  endUsers     IssuanceEndUser[]
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")

  @@map("issuance")
}

// New junction table for Issuance and EndUser
model IssuanceEndUser {
  id        String               @id @unique @default(uuid())
  issuance  Issuance            @relation(fields: [issuanceId], references: [id])
  endUser   EndUser             @relation(fields: [endUserId], references: [id])
  issuanceId String
  endUserId  String
  items     IssuanceEndUserItem[]
  createdAt DateTime            @default(now()) @map("created_at")
  updatedAt DateTime            @updatedAt @map("updated_at")

  @@unique([issuanceId, endUserId])
  @@map("issuance_end_user")
}

// New junction table for IssuanceEndUser and Inventory
model IssuanceEndUserItem {
  id                String          @id @unique @default(uuid())
  issuanceEndUser   IssuanceEndUser @relation(fields: [issuanceEndUserId], references: [id])
  inventory         Inventory       @relation(fields: [inventoryId], references: [id])
  issuanceEndUserId String
  inventoryId       String
  quantity          Int
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  @@unique([issuanceEndUserId, inventoryId])
  @@map("issuance_end_user_item")
}

model Role {
  id          String   @id @unique @default(uuid())
  name        String   @unique
  description String?
  permissions String[]
  users       User[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("roles")
}

model User {
  id        String     @id @unique @default(uuid())
  email     String     @unique
  firstname String
  username  String?    @unique
  lastname  String
  password  String
  status    UserStatus @default(active)
  roles     Role[]
  issuances Issuance[]
  Token     Token?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")

  @@map("user")
}

model Token {
  id           String    @id @unique @default(uuid())
  token        String?
  refreshToken String?
  resetToken   String?
  expires_at   DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String    @unique
}

enum Status {
  active
  inactive
}

enum InventoryStatus {
  active
  archived
}

enum IssuanceStatus {
  pending
  withdrawn
  archived
}

enum UserStatus {
  active
  inactive
}

enum Units {
  prs
  ea
  sets
}
