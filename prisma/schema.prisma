generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Inventory {
  id       String        @id @unique @default(uuid())
  name     String        @unique
  sizeType SizeType      @default(none)
  status   ProductStatus @default(active)
  unit     String?
  quantity String?       @default("1")
  item     Item?         @relation(fields: [itemId], references: [id])
  receipts Receipt[]

  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  endUser    EndUser?  @relation(fields: [endUserId], references: [id])
  endUserId  String?
  itemId     String?
  issuance   Issuance? @relation(fields: [issuanceId], references: [id])
  issuanceId String?

  // Add issuance details relation for more direct access
  issuanceDetails IssuanceDetail[]

  @@map("inventories")
}

model Item {
  id               String          @id @unique @default(uuid())
  item_name        String
  location         String
  size             String?
  unit             String?
  receiptRef       String?
  quantity         String?
  expiryDate       DateTime?       @map("expiry_date")
  price            String?
  amount           String?
  inventoryId      String?
  inventory        Inventory[]
  receipt          Receipt?        @relation(fields: [receiptId], references: [id])
  receiptId        String?
  IssuanceDetail   IssuanceDetail? @relation(fields: [issuanceDetailId], references: [id])
  issuanceDetailId String?

  @@map("items")
}

model Receipt {
  id                String        @id @unique @default(uuid())
  receiptDate       DateTime      @default(now()) @map("receipt_date")
  source            String?
  quantity          String?       @default("1")
  status            ProductStatus @default(pending)
  issuanceDirective String?       @map("issuance_directive")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  inventory         Inventory[]
  user              User?         @relation(fields: [userId], references: [id])
  userId            String?
  item              Item[]

  @@map("receipts")
}

model Issuance {
  id                String        @id @unique @default(uuid())
  issuanceDate      DateTime      @default(now()) @map("issuance_date")
  issuanceDirective String?       @map("issuance_directive")
  validityDate      DateTime      @map("validity_date")
  documentNo        String?       @map("document_no")
  quantity          String?       @default("1")
  endUsers          EndUser[]
  status            ProductStatus @default(active)
  issuanceStatus    ProductStatus @default(pending)
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  user              User?         @relation(fields: [userId], references: [id])
  userId            String?

  // Add direct inventory relation
  inventory       Inventory[]
  issuanceDetails IssuanceDetail[]

  @@map("issuances")
}

model IssuanceDetail {
  id        String        @id @unique @default(uuid())
  quantity  String        @default("1")
  status    ProductStatus @default(pending)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  // Improve relations for easier querying
  inventory   Inventory? @relation(fields: [inventoryId], references: [id])
  inventoryId String?

  issuance   Issuance @relation(fields: [issuanceId], references: [id])
  issuanceId String

  endUser   EndUser? @relation(fields: [endUserId], references: [id])
  endUserId String?

  items Item[]

  @@map("issuance_details")
}

model EndUser {
  id          String           @id @unique @default(uuid())
  name        String
  inventories IssuanceDetail[]
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  Issuance    Issuance?        @relation(fields: [issuanceId], references: [id])
  issuanceId  String?
  inventory   Inventory[]

  @@map("end_users")
}

model Role {
  id          String   @id @unique @default(uuid())
  name        String   @unique
  description String?
  permissions String[]
  users       User[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("roles")
}

model User {
  id        String     @id @unique @default(uuid())
  email     String     @unique
  firstname String
  username  String?    @unique
  lastname  String
  password  String
  status    UserStatus @default(active)
  roles     Role[]
  Token     Token?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
  Issuance  Issuance[]
  Receipt   Receipt[]

  @@map("user")
}

model Token {
  id           String    @id @unique @default(uuid())
  token        String?
  refreshToken String?
  resetToken   String?
  expires_at   DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String    @unique

  @@map("tokens")
}

enum UserStatus {
  active
  inactive
}

enum ProductStatus {
  active
  archived
  withdrawn
  pending
}

enum SizeType {
  none
  apparrel
  numerical
}
