generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Expense {
  id          String   @id @unique @default(uuid())
  expenseType String   @map("expense_type")
  amount      Decimal  @db.Decimal(10, 2)
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  description String
  status      Status   @default(active)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("expense")
}

model Inventory {
  id         String          @id @unique @default(uuid())
  itemName   String          @map("item_name")
  location   String
  supplier   String
  quantity   Int
  price      Decimal         @db.Decimal(10, 2)
  amount     Decimal         @db.Decimal(10, 2)
  size       String?
  status     InventoryStatus @default(pending)
  isArchived Boolean         @default(false) @map("is_archived")
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @updatedAt @map("updated_at")
  issuances  Issuance[]
  EndUser    EndUser?        @relation(fields: [endUserId], references: [id])
  endUserId  String?

  @@map("inventory")
}

model EndUser {
  id        String      @id @unique @default(uuid())
  name      String      @map("name")
  // Make a relation to the issuance model and the inventory model
  issuance  Issuance[]
  inventory Inventory[]

  @@map("end_user")
}

model Issuance {
  id             String      @id @unique @default(uuid())
  userId         String      @map("user_id")
  directiveNo    String      @map("directive_no")
  issuanceDate   DateTime    @default(now()) @map("issuance_date")
  expiryDate     DateTime    @map("expiry_date")
  documentNum    String      @map("document_num")
  isArchived     Boolean     @default(false) @map("is_archived")
  user           User        @relation(fields: [userId], references: [id])
  inventoryItems Inventory[]
  EndUser        EndUser?    @relation(fields: [endUserId], references: [id])
  endUserId      String?
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @updatedAt @map("updated_at")

  @@map("issuance")
}

model Role {
  id          String   @id @unique @default(uuid())
  name        String   @unique
  description String?
  permissions String[]
  users       User[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("roles")
}

model User {
  id        String     @id @unique @default(uuid())
  email     String     @unique
  firstname String
  username  String?    @unique
  lastname  String
  password  String
  status    UserStatus @default(active)
  roles     Role[]
  issuances Issuance[]
  Token     Token?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")

  @@map("user")
}

model Token {
  id           String    @id @unique @default(uuid())
  token        String?
  refreshToken String?
  resetToken   String?
  expires_at   DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String    @unique
}

enum Status {
  active
  inactive
}

enum InventoryStatus {
  pending
  withdrawn
}

enum IssuanceStatus {
  pending
  withdrawn
}

enum UserStatus {
  active
  inactive
}
